import streamlit as st
from PIL import Image
import requests
import io
from ultralytics import YOLO
import torch
import cv2
import numpy as np
from io import BytesIO

DEVICE = "cpu"

model1 = YOLO("Models/yolo666.pt")
model2 = YOLO("Models/yolo_1.pt")
Model3 = torch.jit.load('Models/best_model_new.pt', map_location=DEVICE)

def mask_faces(image_np):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –ª–∏—Ü –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
    :param image_np: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ NumPy (BGR).
    :return: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ª–∏—Ü–∞–º–∏.
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ grayscale
    gray = cv2.cvtColor(image_np, cv2.COLOR_BGR2GRAY)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ Haar Cascade –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ª–∏—Ü
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

    # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ª–∏—Ü
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    # –ü—Ä–æ—Ö–æ–¥ –ø–æ –∫–∞–∂–¥–æ–º—É –ª–∏—Ü—É
    for (x, y, w, h) in faces:
        # –†–∞–∑–º—ã—Ç–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ª–∏—Ü–∞
        face_roi = image_np[y:y+h, x:x+w]
        blurred_face = cv2.GaussianBlur(face_roi, (99, 99), 30)
        image_np[y:y+h, x:x+w] = blurred_face

    return image_np


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
def process_uploaded_files(files):
    for file in files:
        st.write(f"–ò–º—è —Ñ–∞–π–ª–∞: {file.name}")
        img = Image.open(file)
        st.image(img, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)

def process_url_image(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        img = Image.open(io.BytesIO(response.content))
        st.image(img, caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ URL", use_column_width=True)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL: {e}")

def page0():
    st.title("–ü—Ä–æ–µ–∫—Ç –¥–µ–ª–∞–ª–∏")
    st.subheader("–ê—Ä—Ç—ë–º - –î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü ü§®")
    st.subheader("–î–º–∏—Ç—Ä–∏–π - –î–µ—Ç–µ–∫—Ü–∏–∏ –æ–ø—É—Ö—É–ª–µ–π üß†")
    st.subheader("–ö—Å–µ–Ω–∏—è - –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∞—ç—Ä–æ–∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤ üåé")


def page1():
    st.title("–î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü ü§®")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    uploaded_files = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", 
        type=["png", "jpg", "jpeg"], 
        accept_multiple_files=True
    )

    if uploaded_files:
        for uploaded_file in uploaded_files:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ PIL.Image
            image = Image.open(uploaded_file)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            st.subheader("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
            st.image(image, caption="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç NumPy –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RGB -> BGR
            image_np = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–µ–ª—å—é YOLO
            results = model1.predict(source=image_np, conf=0.6)  # conf - –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏

            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏:")
            for result in results:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ bounding box'–æ–≤
                boxes = result.boxes.xyxy.cpu().numpy()  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã bounding box'–æ–≤
                confidences = result.boxes.conf.cpu().numpy()  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏

                # –ö–æ–ø–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
                masked_image = image_np.copy()

                # –ü—Ä–æ—Ö–æ–¥ –ø–æ –∫–∞–∂–¥–æ–º—É –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–º—É –ª–∏—Ü—É
                for box in boxes:
                    x1, y1, x2, y2 = map(int, box)  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã bounding box'–∞
                    face_roi = masked_image[y1:y2, x1:x2]  # –û–±–ª–∞—Å—Ç—å –ª–∏—Ü–∞
                    blurred_face = cv2.GaussianBlur(face_roi, (99, 99), 30)  # –†–∞–∑–º—ã—Ç–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ª–∏—Ü–∞
                    masked_image[y1:y2, x1:x2] = blurred_face  # –ó–∞–º–µ–Ω–∞ –æ–±–ª–∞—Å—Ç–∏ –ª–∏—Ü–∞ –Ω–∞ —Ä–∞–∑–º—ã—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –∏–∑ BGR –≤ RGB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Streamlit
                masked_image_rgb = cv2.cvtColor(masked_image, cv2.COLOR_BGR2RGB)
                st.image(masked_image_rgb, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏", use_container_width=True)


        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ URL
    def process_url_image(url):
        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL
            response = requests.get(url)
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ

            # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–∞–π—Ç–æ–≤
            image = Image.open(BytesIO(response.content))

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            st.subheader("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ URL):")
            st.image(image, caption="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç NumPy –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RGB -> BGR
            image_np = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–µ–ª—å—é YOLO
            results = model1.predict(source=image_np, conf=0.6)  # conf - –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏

            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏:")
            for result in results:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ bounding box'–æ–≤
                boxes = result.boxes.xyxy.cpu().numpy()  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã bounding box'–æ–≤
                confidences = result.boxes.conf.cpu().numpy()  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏

                # –ö–æ–ø–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
                masked_image = image_np.copy()

                # –ü—Ä–æ—Ö–æ–¥ –ø–æ –∫–∞–∂–¥–æ–º—É –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–º—É –ª–∏—Ü—É
                for box in boxes:
                    x1, y1, x2, y2 = map(int, box)  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã bounding box'–∞
                    face_roi = masked_image[y1:y2, x1:x2]  # –û–±–ª–∞—Å—Ç—å –ª–∏—Ü–∞
                    blurred_face = cv2.GaussianBlur(face_roi, (99, 99), 30)  # –†–∞–∑–º—ã—Ç–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ª–∏—Ü–∞
                    masked_image[y1:y2, x1:x2] = blurred_face  # –ó–∞–º–µ–Ω–∞ –æ–±–ª–∞—Å—Ç–∏ –ª–∏—Ü–∞ –Ω–∞ —Ä–∞–∑–º—ã—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –∏–∑ BGR –≤ RGB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Streamlit
                masked_image_rgb = cv2.cvtColor(masked_image, cv2.COLOR_BGR2RGB)
                st.image(masked_image_rgb, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏", use_container_width=True)

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL: {e}")

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ URL
    url = st.text_input("–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
    if url:
        st.write("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL...")
        process_url_image(url)

    st.subheader("–ß–∏—Å–ª–æ —ç–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è: 5")
    st.subheader("–û–±—ä–µ–º –≤—ã–±–æ—Ä–∫–∏: 13.386 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    st.subheader("–ú–µ—Ç—Ä–∏–∫–∏")

    st.image("/home/artem/–ó–∞–≥—Ä—É–∑–∫–∏/confusion_matrix.png")
    st.image("/home/artem/–ó–∞–≥—Ä—É–∑–∫–∏/results(1).png")
    st.image("/home/artem/–ó–∞–≥—Ä—É–∑–∫–∏/F1_curve(2).png")

def page2():
    st.title("–î–µ—Ç–µ–∫—Ü–∏–∏ –æ–ø—É—Ö—É–ª–µ–π üß†")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    uploaded_files = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", 
        type=["png", "jpg", "jpeg"], 
        accept_multiple_files=True
    )

    if uploaded_files:
        for uploaded_file in uploaded_files:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ PIL.Image
            image = Image.open(uploaded_file)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            st.subheader("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
            st.image(image, caption="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç NumPy –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RGB -> BGR
            image_np = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–µ–ª—å—é YOLO
            results = model2.predict(source=image_np, conf=0.3)  # conf - –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏

            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏:")
            for result in results:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–º–∏ bounding box'–∞–º–∏
                result_image = result.plot()  # plot() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –∏–∑ BGR –≤ RGB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Streamlit
                result_image_rgb = cv2.cvtColor(result_image, cv2.COLOR_BGR2RGB)
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                st.image(result_image_rgb, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏", use_container_width=True)


    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ URL
    def process_url_image(url):
        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL
            response = requests.get(url)
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ

            # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–∞–π—Ç–æ–≤
            image = Image.open(BytesIO(response.content))

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            st.subheader("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ URL):")
            st.image(image, caption="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç NumPy –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RGB -> BGR
            image_np = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–µ–ª—å—é YOLO
            results = model2.predict(source=image_np, conf=0.3)  # conf - –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏

            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏:")
            for result in results:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–º–∏ bounding box'–∞–º–∏
                result_image = result.plot()  # plot() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –∏–∑ BGR –≤ RGB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Streamlit
                result_image_rgb = cv2.cvtColor(result_image, cv2.COLOR_BGR2RGB)
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                st.image(result_image_rgb, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏", use_container_width=True)

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL: {e}")

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ URL
    url = st.text_input("–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
    if url:
        st.write("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL...")
        process_url_image(url)

    st.subheader("–ß–∏—Å–ª–æ —ç–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è: 30")
    st.subheader("–û–±—ä–µ–º –≤—ã–±–æ—Ä–∫–∏: 893 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    st.subheader("–ú–µ—Ç—Ä–∏–∫–∏")

    st.image("/home/artem/–ó–∞–≥—Ä—É–∑–∫–∏/–î–∏–º–∞/confusion_matrix.png")
    st.image("/home/artem/–ó–∞–≥—Ä—É–∑–∫–∏/–î–∏–º–∞/results.png")
    st.image("/home/artem/–ó–∞–≥—Ä—É–∑–∫–∏/–î–∏–º–∞/F1_curve.png")


def page3():
    st.title("–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∞—ç—Ä–æ–∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤ üåé")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    uploaded_files = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", 
        type=["png", "jpg", "jpeg"], 
        accept_multiple_files=True
    )

    if uploaded_files:
        for uploaded_file in uploaded_files:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ PIL.Image
            image = Image.open(uploaded_file)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            st.subheader("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
            st.image(image, caption="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç NumPy –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RGB -> BGR
            image_np = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–µ–ª—å—é YOLO
            results = Model3.predict(source=image_np, conf=0.3)  # conf - –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏

            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏:")
            for result in results:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–º–∏ bounding box'–∞–º–∏
                result_image = result.plot()  # plot() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –∏–∑ BGR –≤ RGB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Streamlit
                result_image_rgb = cv2.cvtColor(result_image, cv2.COLOR_BGR2RGB)
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                st.image(result_image_rgb, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏", use_container_width=True)


    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ URL
    def process_url_image(url):
        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL
            response = requests.get(url)
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ

            # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–∞–π—Ç–æ–≤
            image = Image.open(BytesIO(response.content))

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            st.subheader("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ URL):")
            st.image(image, caption="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç NumPy –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RGB -> BGR
            image_np = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–µ–ª—å—é YOLO
            results = model2.predict(source=image_np, conf=0.3)  # conf - –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏

            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏:")
            for result in results:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–º–∏ bounding box'–∞–º–∏
                result_image = result.plot()  # plot() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –∏–∑ BGR –≤ RGB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Streamlit
                result_image_rgb = cv2.cvtColor(result_image, cv2.COLOR_BGR2RGB)
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                st.image(result_image_rgb, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏", use_container_width=True)

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL: {e}")

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ URL
    url = st.text_input("–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
    if url:
        st.write("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL...")
        process_url_image(url)

    st.subheader("–ß–∏—Å–ª–æ —ç–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è: 5")
    st.subheader("–û–±—ä–µ–º –≤—ã–±–æ—Ä–∫–∏: 5.000")
    st.subheader("–ú–µ—Ç—Ä–∏–∫–∏")


def main():
    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    
    page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", ("–ö–æ–º–∞–Ω–¥–∞ Yolo", "–î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü", "–î–µ—Ç–µ–∫—Ü–∏–∏ –æ–ø—É—Ö—É–ª–µ–π", "–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∞—ç—Ä–æ–∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤"))

    if page == "–ö–æ–º–∞–Ω–¥–∞ Yolo":
        page0()
    elif page == "–î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü":
        page1()
    elif page == "–î–µ—Ç–µ–∫—Ü–∏–∏ –æ–ø—É—Ö—É–ª–µ–π":
        page2()
    elif page == "–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∞—ç—Ä–æ–∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤":
        page3()

if __name__ == "__main__":
    main()